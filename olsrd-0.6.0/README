
+====================================================================+
| README - olsr.org OLSR daemon 0.5.4, 21.10.2007                    |
+====================================================================+

Authors:
Andreas Tonnesen(andreto@olsr.org)
Thomas Lopatic  (thomas@lopatic.de)
Aaron Kaplan (aaron@lo-res.org)


http://www.olsr.org


CONTENTS:

I.   - GENERAL INFORMATION
     * ABOUT
     * GETTING HOLD OF OLSRD
     * RELEASE NOTES
     * RFC COMPLIANCE
     * PLUGINS
     * LINK QUALITY ROUTING
     * KNOWN PROBLEMS
     * FUTURE WORK

II.  - BUILDING AND RUNNING OLSRD
     * GENERAL INFORMATION
     * PLUGINS
     * GUI FRONTENDS

     * LINUX
     * WINDOWS
     * FREEBSD
     * OSX
  


----------------------------------------------------------------------
 I.   - GENERAL INFORMATION
----------------------------------------------------------------------

=========
 * ABOUT
=========

The olsr.org OLSR daemon is an implementation of the Optimized Link State
routing protocol. The protocol is documented in RFC3626. The website
of olsrd is http://www.olsr.org
org OLSR守护进程是优化链接状态的实现路由协议。

Olsrd is designed to be a modular an extensible implementation. It features
a plugin interface, allowing for developers to extend OLSR operation without
interfering with the core code. It also features a experimental link quality
routing scheme.
Olsrd被设计成模块化的可扩展实现。它具有一个插件接口，允许开发人员在不干扰核心代码的情况下扩展OLSR操作。它还具有一个实验性的链路质量路由方案。

To ask questions or make comments, join up with the mailing lists:
olsr-dev@olsr.org   - development discussion
olsr-users@olsr.org - usage discussion

A bug tracker is also available at the sourceforge project site
http://sourceforge.net/projects/olsrd/

Olsrd source or binaries can be downloaded from olsr.org. CVS is available
for the cutting edge features ;-)

The current Olsrd work is done via http://olsr.funkfeuer.at/ in the OLSR-NG
project.


=================
 * RELEASE NOTES
=================



==================
 * RFC COMPLIANCE
==================

If olsrd is ran without using link-quality routing/MPR selection it is RFC3626
compliant in that it will inter-operate with other RFC3626 implementations.
Internally there are a few things that are solved differently that proposed 
in the RFC. Check out the "Conclusions" section of the "Implementing And
Extending The Optimized Link State routing Protocol" thesis available at
olsr.org.
如果在不使用链路质量路由/ MPR选择的情况下运行olsrd，则它与RFC3626兼容，因为它将与其他RFC3626实现互操作。
在内部，RFC中提出了一些不同的解决方案。查看olsr.org提供的“实现和扩展优化链路状态路由协议”论文的“结论”部分。


===========
 * PLUGINS   插件
===========

Olsrd supports dynamic loading of plugins (dynamically loaded libraries) for 
functions like generation and processing of private package types, setting
olsrd configurations in run-time and much more. This design is chosen for
amongst others, the following reasons:

Olsrd支持动态加载插件（动态加载的库），用于生成和处理私有包类型，在运行时设置olsrd配置等功能。 选择此设计的原因如下：

 * No need to change any code in the olsr daemon to add custom packages or 
   functionality.
   不需要更改olsr守护程序中的任何代码来添加自定义包或功能。
 * Users are free to implement olsrd plugins and license them under whatever 
   terms they like.
   用户可以自由地实现olsrd插件，并按照他们喜欢的任何条款授权它们。
 * The plugins can be written in any language that can be compiled as 
   a dynamic library. Linux even allows scripts!
   插件可以用任何可以编译为动态库的语言编写。Linux甚至允许脚本！
 * No need for people with extended OLSR versions to rely on heavy patching 
   to maintain functionality when new olsrd versions are released.
   在发布新的olsrd版本时，不需要具有扩展OLSR版本的人依赖大量修补来维护功能。

OLSR provides a default forwarding algorithm that allows for forwarding of OLSR 
messages of unknown types. This is really neat - because it means that even if 
only a subset of the nodes in the network actually known how to interpret 
a certain message type - all nodes will forward them according to the MPR 
pragma. A user may want to use the optimized flooding technique in OLSR to 
broadcast certain information, routing related or not, to all nodes that knows 
how to handle this message. Services that needs to broadcast/multicast data can 
encapsulate data in a private OLSR message type using a olsrd plugin. 
OLSR提供默认转发算法，允许转发未知类型的OLSR消息。 
这非常简洁 - 因为这意味着即使网络中只有一部分节点实际知道如何解释某种消息类型 - 所有节点都会根据MPR编译指示转发它们。 
用户可能想要在OLSR中使用优化的泛洪技术来向所有知道如何处理该消息的节点广播某些信息，路由是否相关。 需要广播/组播数据的服务可以
使用olsrd插件将数据封装在私有OLSR消息类型中。

The design of the various entities of OLSR allows one to easily add special 
functionality into most aspects of OLSR. One can both register functions and 
unregister them with the socket parser, packet parser, scheduler and HNA set etc. 
This opens up for possibilities like intercepting current operation and replacing 
it with custom actions.
OLSR的各种实体的设计允许人们在OLSR的大多数方面轻松添加特殊功能。 可以注册函数并使用套接字解析器，数据包解析器，调度程序和HNA集等注销它们。
这样就可以拦截当前操作并用自定义操作替换它。

  Plugins that are part of this release(can be found in the lib/ directory):
  作为此发行版的一部分的插件（可以在lib /目录中找到）：
  
  - Tiny Application Server (TAS).
    微型应用服务器（TAS）。
    
  - HttpInfo. This plugin implements a simple HTTP server that serves dynamic
    pages with lots of information about the running olsrd process.
    HttpInfo。 这个插件实现了一个简单的HTTP服务器，它为动态页面提供大量有关正在运行的olsrd进程的信息。
    
  - TxtInfo. This delivers output similar to the above. However, it is intended
    for external tools to use the output.
    TxtInfo。 这提供了与上述类似的输出。 但是，它旨在用于外部工具以使用输出。
    
  - Mini.
    微型
    
  - Nameservice.
    命名服务
    
  - Dynamic Internet gateway. A plugin that dynamically adds and removes Internet
    HNA transmissions based on if there exists a default gateway to Internet
    with hop count = 0(non OLSR gateway). It has been extended to be able to
    ping Internet nodes to check for connectivity as well.
    动态Internet网关。 一个插件，根据是否存在跳数为0的非默认网关（非OLSR网关），动态添加和删除Internet HNA传输。 
    它已被扩展为能够ping Internet节点以检查连接性。
    
  - Dot draw. A plugin that produces output in the dot format representing
    the network topology.
    点画。 一种插件，以点格式生成表示网络拓扑的输出。
    
  - Secure OLSR plugin. This plugin adds a signature to all messages
    to ensure data integrity. This way only nodes with access to the
    shared key can participate in the routing.
    You need to have the OpenSSL libs installed to use this plugin.
    安全的OLSR插件。 此插件为所有消息添加签名以确保数据完整性。 这样，只有访问共享密钥的节点才能参与路由。
    需要安装OpenSSL库才能使用此插件。


========================
 * LINK QUALITY ROUTING   链接质量路由
========================

Release 0.4.8 is the first version of olsrd that implements the ETX
link quality metric. This enables olsrd to prefer routes that have a
superior overall quality to routes that are worse but consist of less
hops. Have a look at the README-Link-Quality.html file for details.
版本0.4.8是实现ETX链路质量度量的olsrd的第一个版本。 这使得olsrd更喜欢具有更高整体质量的路由更糟糕但路由更少的路由。 
有关详细信息，请查看README-Link-Quality.html文件。

==================
 * KNOWN PROBLEMS   已知的问题
==================

There is no synchronization concept (and thus - and for Gods sake -  no
code). Some plugins use threads for concurrency so this should be solved.
ATM the bmf plugin is the only one using threads.
没有同步概念（因此 - 为了上帝的缘故 -  nocode）。 一些插件使用线程进行并发，因此应该解决这个问题。
ATM bmf插件是唯一使用线程的插件。

===============
 * FUTURE WORK    未来工作
===============

Future work concentrates on reduction of ressource (ab)use and to make
it more scalable. Of course additional useful plugins are always
appreciated.
未来的工作集中在减少资源，（滥）用和使其更具可扩展性。当然，其他有用的插件总是受到赞赏。

The current track of development is documented in the OLSR-NG 
project: http://olsr.funkfeuer.at


----------------------------------------------------------------------
 II.  - BUILDING AND RUNNING OLSRD
----------------------------------------------------------------------

=======================
 * GENERAL INFORMATION
=======================

Olsrd is implemented in pure C with very few dependencies. Olsrd is 
known to run on various hardware like:
Olsrd在纯C中实现，具有很少的依赖性。 众所周知，Olsrd可以在各种硬件上运行：

 * x86    - your regular PC    常规PC
 * PPC    - Macintosh hardware   Macintosh硬件
 * MIPSEL - Embedded systems like the LinkSys WRT54g     LinkSys WRT54g等嵌入式系统
 * ARM    - Embedded systems like Compaq/HP iPaq     Compaq / HP iPaq等嵌入式系统
 
A binary tarball featuring x86, MIPSEL and ARM binaries is available
for download at olsr.org
可以从olsr.org下载具有x86，MIPSEL和ARM二进制文件的二进制tarball

Ports exist for all major operating systems:
所有主要操作系统都有端口：

- Linux
- Mac OS X
- NetBSD/OpenBSD/FreeBSD: ATM the main development occurs on Linux with
         GNU tools so occasionally it needs some minor tweaks to compile
         it on *BSD. Please send patches if you fix problems there.
         ATM的主要开发发生在使用GNU工具的Linux上，所以偶尔需要一些小的调整才能在* BSD上编译它。 如果您在那里修复问题，请发送补丁。
         
- Win32: You need (the relevant parts of) cygwin to compile the daemon
         as such. The installer and GUI needs VisualC++ though.
         Win32 is the least supported port. Feel free to send patches!
         你需要（cygwin的相关部分）来编译守护进程。 安装程序和GUI需要VisualC ++。
          Win32是受支持最少的端口。 随意发送补丁！

Packages for the operating systems and various distributions are available
at olsr.org. Feel free to package it and announce it on the mailing lists.
    olsr.org提供了操作系统和各种发行版的软件包。 随意打包并在邮件列表上公布。

=========== 
 * PLUGINS      插件
===========

All the available plugins are also implemented in C and requires gcc/libc
to build. the dot_draw plugin compiles for Windows and GNU/Linux. the rest
of the plugins will only compile for GNU/Linux.
所有可用的插件也在C中实现，需要构建gcc / libc。 dot_draw插件为Windows和GNU / Linux编译。 其余的插件只能为GNU / Linux编译。

Building the plugins are just a matter of executing:  构建插件只需执行：
make
while installing requires(as root): 安装时需要（以root身份）：
make install
in the plugins top directory (i.e. "lib/$plugin/").  在插件顶级目录中（即"lib/$plugin/"）。
To use the plugins add them to the olsrd configuration file.  要使用插件，请将它们添加到olsrd配置文件中。

=====================
 * OS SUPPORT STATUS  操作系统支持状态
=====================

COMPONENT/OS	Linux	Win32	FreeBSD	NetBSD	OpenBSD	OSX
------------------------------------------------------------
olsrd		+/+	+/+	+/+	+/+	+/+	?
olsr_switch	+/+	+/+	+/+	+/+	+/+	?
------------------------------------------------------------
PLUGINS
bmf		+/+	+/?	+/+	+/+	+/+	-
dot_draw	+/+	+/?	+/+	+/+	+/+	+/+
dyn_gw		+/+	+/?	+/-	+/-	+/-	+/+
dyn_gw_plain	+/+	+/?	+/-	+/-	+/-	+/+
httpinfo	+/+	+/+	+/+	+/+	+/+	+/+
mini		+/+	+/?	+/+	+/+	+/+	+/+
nameservice	+/+	+/?	+/+	+/+	+/+	+/+
pgraph		+/+	+/+	+/+	+/+	+/+	+/+
quagga		+/+	-/-	+/+	+/+	+/+	?
secure		+/+	+/+	+/+	+/+	+/+	+/+
tas		+/+	-	-	-	-	?
txtinfo		+/+	+/+	+/+	+/+	+/+	+/+
------------------------------------------------------------

LEGEND:   +/+ = compiles/runs
          +/- = compiles/does not work
          -   = does not compile
          ?   = unknown

=================
 * GUI FRONTENDS     GUI 前端
=================

A GUI front end for GNU/Linux using GTK is available in the gui/ 
directory. This implementation is no longer supported, and might
not work any more. It will be completly removed in a future release.
gui /目录中提供了使用GTK的GNU / Linux GUI前端。 不再支持此实现，并且可能不再起作用。 它将在以后的版本中完全删除。

There currently is, however, a native MFC-based Windows GUI. Unlike
olsrd the GUI has to be compiled with Visual C++ 6. It can be found in
the gui/win32/ directory. Simply open the "Frontend.dsw" workspace in
the Visual C++ 6 IDE. Then compile "Frontend" and "Shim", which
creates "Switch.exe" and "Shim.exe".
但是，目前有一个基于MFC的本机Windows GUI。 与olsrd不同，GUI必须使用Visual C ++ 6进行编译。它可以在gui / win32 /目录中找到。 
只需在Visual C ++ 6 IDE中打开“Frontend.dsw”工作区即可。 然后编译“Frontend”和“Shim”，创建“Switch.exe”和“Shim.exe”。

To run the Windows GUI simply make sure that "Switch.exe", "Shim.exe",
"olsrd.exe", "olsrd_cfgparser.dll", and "Default.olsr" are located in
the same directory and run "Switch.exe". "Shim.exe" is just an
auxiliary console application that is required by "Switch.exe".
要运行Windows GUI，只需确保“Switch.exe”，“Shim.exe”，“olsrd.exe”，“olsrd_cfgparser.dll”和“Default.olsr”位于同一目录中并运行“Switch.exe”。
“Shim.exe”只是“Switch.exe”所需的辅助控制台应用程序。

The GUI is pretty self-explanatory. The three buttons on the lower
right of the GUI window start the OLSR server, stop the OLSR server,
and exit the GUI.
GUI非常明显。 GUI窗口右下角的三个按钮启动OLSR服务器，停止OLSR服务器并退出GUI。

Use the "Settings" tab to specify the options that the GUI uses to run
the OLSR server "olsrd.exe". When you click "Start" the GUI generates
a temporary configuration file from the information given by the
"Settings" tab. This temporary configuration file is passed to the
OLSR server via its "-f" option.
使用“设置”选项卡指定GUI用于运行OLSR服务器“olsrd.exe”的选项。 单击“开始”时，GUI将根据“设置”选项卡提供的信息生成临时配置文件。
此临时配置文件通过其“-f”选项传递给OLSR服务器。

"Offer Internet connection" is only available if you have an Internet
connection, i.e. if you have a default route configured. If you tick
this option an HNA entry for the default route is added to the
temporary configuration file, allowing other nodes in the OLSR network
to use your Internet connection.
“提供Internet连接”仅在您具有Internet连接时才可用，即，如果您配置了默认路由。 
如果勾选此选项，则会将默认路由的HNA条目添加到临时配置文件中，从而允许OLSR网络中的其他节点使用您的Internet连接。

IP version 6 cannot currently be selected, as support for IPv6 is not
yet complete in the Windows version.
目前无法选择IP版本6，因为Windows版本中尚未完成对IPv6的支持。

"Enable ETX link quality" tells the OLSR server to detect the quality
of its links to its neighbors using a variant of the ETX
metric. "Window size" specifies the number of most recent packets to
be used when calculating the packet loss. If, for example, this
parameter is set to 10, then the OLSR server will calculate the packet
loss among the most recent 10 OLSR packets received from each
neighbor. If "For MPR selection only" is active, the link quality
information is only used to select MPRs that offer the best paths to
your two-hop neighbors. If "For MPR selection and routing" is active,
the link quality is additionally used to create the routing table.

WARNING - Enabling ETX breaks compliance with the OLSR
standard. ETX-enabled nodes do not inter-operate with nodes that have
ETX switched off. DO NOT USE NODES WITH DIFFERENT ETX SETTINGS IN A
SINGLE NETWORK!

The three buttons on the lower right of the "Settings" tab open
previously saved settings, save the current settings to a
configuration file, and reset the current settings to default values.

If you start the GUI with the path to a configuration file as the only
command line argument, the GUI opens the given configuration file and
runs the OLSR server with this configuration. So, saving a
configuration file with a ".olsr" extension, for example, and making
"Switch.exe" the handler for ".olsr" files enables you to run the OLSR
server with a simple double click on the configuration file.

The "Output" tab shows the output of the currently running OLSR
server. The output is limited to 1000 lines. The 1001st line will make
the first line disappear and so on. When you click "Start" The GUI
simply invokes the OLSR server "olsrd.exe" and intercepts its console
output. Use the four buttons on the upper right of the tab to freeze
the output, resume frozen output, save the output to a file, or clear
the output.

The "Nodes" tab contains information about the nodes that the OLSR
server currently knows about. If you click on the address of a node in
the "Node list" list box, the GUI populates the three "Node
information" list boxes on the right with the multi-point relays of
the selected node (MPR), the interfaces of the selected node (MID),
and the non-OLSR networks accessible via the selected node (HNA).

The "Routes" tab shows the routes that the currently running OLSR
server has added.

The default settings for the "Settings" tab are taken from the
"Default.olsr" file. The configuration of the last interface in this
file is used to populate the per-interface settings (HELLO interval,
etc.) in the "Settings" tab. If you do not want to specify any
interface in "Default.olsr", the problem arises that you do not have
such a last interface. In this case simply create an interface with
the special name of "GUI". This tells the GUI to use the configuration
of the interface for the per-interface settings and to forget about
this interface afterward. See the comments in the "Default.olsr" file
for details.


=========
 * LINUX
=========

To build olsrd you need to have all the regular development tools 
installed. This includes gcc, make, glibc, makedep etc.
To install to a directory different from /(/etc, /usr/bin) use 
DESTDIR=targetdir. To use other compilers set CC=yourcompiler.

To build:
 make
To install(as root):
 make install
To delete object files run:
 make clean
Optionally, to clean all generated files:
 make uberclean

Before running olsrd you must edit the default configuration file 
/etc/olsrd.conf adding at least what interfaces olsrd is to run on. 
Options in the config file can also be overridden by command line 
options. See the manual pages olsrd(8) and olsrd.conf(5) for details.
The binary is named 'olsrd' and is installed in (PREFIX)/usr/sbin. 
You must have root privileges to run olsrd!
To run olsrd just type:
olsrd

If debug level is set to 0 olsrd will detach and run in the background, 
if not it will keep running in your shell.

===========
 * WINDOWS
===========

*** COMPILING

To compile the Windows version of the OLSR server or the dot_draw
plugin you need a Cygwin installation with a current version of GCC
and Mingw32. Simply use

  make

to build the olsrd executable. Building the dot_draw plugin works
slightly different, we do not yet have a unified makefile for all
architectures here. Switch to the dot_draw directory lib/dot_draw/ and
generate the Windows makefile by saying

  ./mkmf.sh

This will generate "Makefile.win32" by adding dependencies to
"Makefile.win32.in". Then just say

  make -f Makefile.win32

to build the dot_draw plugin. However, make sure that you have build
olsrd before that, as the dot_draw plugin requires some object files
that are only generated when olsrd is built.

*** INTERFACE NAMING

On Linux network interfaces have nice names like "eth0". In contrast,
Windows internally identifies network interfaces by pretty awkward
names, for example:

  "{EECD2AB6-C2FC-4826-B92E-CAA53B29D67C}"

Hence, the Windows version implements its own naming scheme that maps
each internal name to a made-up name like "if03", which is easier to
memorize. Simply invoke the OLSR server as follows to obtain its view
of your interfaces:

  olsrd.exe -int

This lists the made-up interface names along with their current IP
addresses to enable you to find out which made-up interface name
corresponds to which of your physical interfaces.

"+" in front of the IP addresses means that the OLSR server has
identified the interface as a WLAN interface. "-" indicates that the
OLSR server considers this interface to be a wired interface. "?"
means "no idea". Detection currently only works on NT, 2000, and
XP. Windows 9x and ME will always display "?".

For techies: The made-up names consist of the string "if" followed by
a two-digit hex representation of the least significant byte of the
Windows-internal interface index, which should be different for each
interface and thus make each made-up name unique. Again, this is
undocumented and this assumption may be wrong in certain cases. So, if
the "-int" option reports two interfaces that have the same name,
please do let me know.

*** CONFIGURATION FILE

If you do not specify a configuration file, the OLSR server
("olsrd.exe") by default attempts to use "olsrd.conf" in your Windows
directory, e.g. "C:\WINDOWS\olsrd.conf".


=========================
 * FREEBSD/NETBSD/OPENBSD
=========================

The FreeBSD port should be relativley stable at this point.
The OpenBSD and NetBSD versions are pretty much untested. They have 
not been extensively tested beyond "doesn't core dump and it looks 
like it adds routes". In order to build it, you need GNU make. Then 
use:

  gmake

to build the olsrd executable. Then do:

  gmake install

to install the executable, the default configuration file, and the
manual pages. So, basically it's the same as on Linux. Have a look at
the Linux section for details.

=======
 * OSX
=======

The OS X port is a direct descendant of the FreeBSD port. So, the same
limitations with respect to testing and maturity apply. Building and
installing works in the same was as on FreeBSD.


